// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/TariqueNasrullah/iotchain/domain"
	mock "github.com/stretchr/testify/mock"
)

// BlockUseCase is an autogenerated mock type for the BlockUseCase type
type BlockUseCase struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *BlockUseCase) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields: ctx
func (_m *BlockUseCase) Fetch(ctx context.Context) ([]*domain.Block, error) {
	ret := _m.Called(ctx)

	var r0 []*domain.Block
	if rf, ok := ret.Get(0).(func(context.Context) []*domain.Block); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *BlockUseCase) GetByID(ctx context.Context, id string) (*domain.Block, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Block
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Block); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, subject
func (_m *BlockUseCase) Store(ctx context.Context, subject *domain.Block) error {
	ret := _m.Called(ctx, subject)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Block) error); ok {
		r0 = rf(ctx, subject)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
